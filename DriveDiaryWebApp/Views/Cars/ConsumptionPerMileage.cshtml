@model DriveDiaryWebApp.ViewModels.CarConsumptionVM

@using System.Text.RegularExpressions;
@using System.Diagnostics;

@{
    ViewBag.Title = "ConsumptionPerMileage";
}

<h2>ConsumptionPerMileage</h2>

<table class="table">
    <tr>
        <th>
            Refuel Mileage (in kms)
        </th>
        <th>
            Date and Time
        </th>
        <th>
            Refuel Amount (in liters)
        </th>
        <th>
            liters / 100 km
        </th>
    </tr>
    @foreach (var item in Model.vmconsumption) {
        <tr>
            <td>
                @Html.DisplayFor(vmitem => item.RefuelMileage)
            </td>
            <td>
                @Html.DisplayFor(vmitem => item.RefuelDateTime)
            </td>
            <td>
                @Html.DisplayFor(vmitem => item.RefuelAmount)
            </td>
            <td>
                @Html.DisplayFor(vmitem => item.AverageConsumption)
            </td>
        </tr>
    }
</table>
<div class="row">
    <div class="col-md-12">
        <h3>Average consumption (l/100 km) to date</h3>
        <canvas id="consumptionChart" height="300" width="500"></canvas>
        <script>
    var ctx = document.getElementById("consumptionChart").getContext("2d");
    var consLabels = [];
    var consLiters = [];

    @foreach (var item in Model.vmconsumption)
            {
                // SL: Populate labels array
                @:consLabels.push("@item.RefuelDateTime.Day/@item.RefuelDateTime.Month");
                                        // SL: Populate consumption data array
                // SL: We need to change the decimal separator for Chart.js...
                try
                {
                    String rexp = "([0-9]+)\\,([0-9]+)";
                    MatchCollection matches = Regex.Matches(item.AverageConsumption.ToString(), rexp);
                    String parsedLiters;
                    @:console.log("rexp = @rexp");
                    @:console.log("matches.Count = @matches.Count");
                        if (matches.Count == 1)
                    {
                        // SL: Exactly one match should be found
                        parsedLiters = matches[0].Groups[1].ToString() + "." + matches[0].Groups[2].ToString();
                        Trace.TraceInformation("ConsumptionPerMileage.cshtml parsedLiters: {0}" + parsedLiters);
                        @:console.log("@parsedLiters");
                                }
                    else
                    {
                        Trace.TraceInformation("ConsumptionPerMileage.cshtml - suspicious match count: {0}", matches.Count);
                        parsedLiters = "0.0";
                        @:console.log("@parsedLiters");
                        }
                    @:consLiters.push("@parsedLiters");
                                }
                catch(Exception e)
                {
                    Trace.TraceError("ConsumptionPerMileage.cshtml threw exception: " + e.GetType());
                }
            }
    var consData = {
        labels: consLabels,
        datasets: [
            {
                label: "Consumption (l/100km)",
                data: consLiters
            }
        ]
    };
    var chartOptions = {
        scales: {
            yAxes: [{
                display: true,
                ticks: {
                    suggestedMin: 0,    // minimum will be 0, unless there is a lower value.
                    // OR //
                    //beginAtZero: true   // minimum value will be 0.
                }
            }]
        }
    };
    var consumptionLineChart = new Chart(ctx).Line(consData, chartOptions);
        </script>
    </div>
</div>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>